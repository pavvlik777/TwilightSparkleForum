@model TwilightSparkle.Forum.Models.Threads.ThreadDetailsViewModel
@{
    ViewData["Title"] = "Thread details";
}

<aside id="sidebar-content">
    <nav>
        @foreach (var section in Model.Sections)
        {
            <div>
                <a href="/Threads/SectionThreads?sectionName=@(section.SectionName)" class="forum-link link">@(section.SectionName)</a>
            </div>
        }
    </nav>
</aside>
<main id="main-content">
    <div id="site-messages"></div>
    <div id="loading" class="hide">
        <img width="200" height="200" border="0" alt="My Little Pony" src="~/images/loading.gif">
        <br />
        <div class="loading-text">Please wait...</div>
    </div>
    <link rel="stylesheet" type="text/css" href="~/css/specific-thread.css" />
    <article class="thread">
        <div class="header">
            <h1 class="thread-name">@(Model.Thread.Title)</h1>
            <h2 class="thread-author-name">Author - @(Model.Thread.AuthorNickname)</h2>
            <div id="thread-likes-section">
                @if (User.Identity.IsAuthenticated)
                {
                    if (Model.LikeStatus == 1)
                    {
                        <button class="like-dislike thread-liked" id="like-thread" thread-id="@(Model.Thread.ThreadId)" type="button">+</button>
                    }
                    else
                    {
                        <button class="like-dislike" id="like-thread" thread-id="@(Model.Thread.ThreadId)" type="button">+</button>
                    }
                }
                <h1 id="likes-amount">@Model.LikesAmount</h1>
                @if (User.Identity.IsAuthenticated)
                {
                    if (Model.LikeStatus == -1)
                    {
                        <button class="like-dislike thread-disliked" id="dislike-thread" thread-id="@(Model.Thread.ThreadId)" type="button">-</button>
                    }
                    else
                    {
                        <button class="like-dislike" id="dislike-thread" thread-id="@(Model.Thread.ThreadId)" type="button">-</button>
                    }
                }
            </div>
            @if (Model.IsAuthor)
            {
                <button type="button" class="button secondary-button" thread-id="@(Model.Thread.ThreadId)" id="thread-delete-button">Delete thread</button>
            }
        </div>
        <div class="thread-content">@Html.Raw(Model.Thread.Content)</div>
    </article>
    @if (User.Identity.IsAuthenticated)
    {
        <form action="/Threads/CommentThread" method="post" id="comment-thread-form" thread-id="@(Model.Thread.ThreadId)" class="thread-comment-form">
            <link rel="stylesheet" type="text/css" href="~/css/thread-management.css" />
            <div id="content-editor" class="control-group">
                <div class="toolbar">
                    <div class="group">
                        <button type="button" id="heading1"><i class="fa fa-header"></i>1</button>
                        <button type="button" id="heading2"><i class="fa fa-header"></i>2</button>
                        <button type="button" id="heading3"><i class="fa fa-header"></i>3</button>
                    </div>
                    <div class="group">
                        <button type="button" id="bold"><i class="fa fa-bold"></i></button>
                        <button type="button" id="italic"><i class="fa fa-italic"></i></button>
                    </div>
                    <div class="group">
                        <button type="button" id="link"><i class="fa fa-link"></i></button>
                        <button type="button" id="list-ul"><i class="fa fa-list-ul"></i></button>
                        <button type="button" id="list-ol"><i class="fa fa-list-ol"></i></button>
                        <button type="button" id="image-link"><i class="fa fa-picture-o"></i></button>
                    </div>
                    <button type="button" id="preview">Preview</button>
                </div>
                <div id="input-output">
                    <textarea id="input-area" rows="30" cols="50" placeholder="Thread content here..."></textarea>
                    <input type="hidden" id="comment-parsed-content" />
                    <div id="output-area"></div>
                    <p class="preview-message">Preview Mode</p>
                </div>
            </div>
            <div class="control-group">
                <button type="submit" class="button secondary-button">Add comment</button>
            </div>
        </form>
    } else {
        <br />
    }

    <div id="thread-comments">
        @foreach (var comment in Model.Comments)
        {
            <article class="thread-comment">
                <div class="header">
                    <h2 class="comment-author">
                        @comment.AuthorNickname On <time datetime="@comment.CommentTime.ToShortDateString()">@comment.CommentTime.ToLocalTime()</time>
                    </h2>
                </div>
                <div class="comment-content">
                    @Html.Raw(comment.Content)
                </div>
            </article>
        }
    </div>
</main>